"Vitamin_D_deficiency",
"Trichtillomania",
# "Psoriasis",
# "Esophagitis",
# "Otitis_media",
# "Ingrown_toenail",
# "ADHD",
# "Arthritis",
# "Chlamydia",
# "Parasites_Scabies",
# "Meningitis",
# "Zika_Virus",
# "Hepatitis",
# "Giardiasis",
# "Takatsubo_Cardiomyopathy",
# "Flu",
# "Obesity",
# "Latex_allergies",
# "Lice",
# "Legionellosis",
# "Lymphocytic_Choriomeningitis",
# "Tetanus",
# "Ticks_Lyme_Disease",
# "Tuburculosis",
# "Trench_fever",
# "Creutzfeldt-Jakob_Disease",
"Hearing_loss")
claims_data <-
data.frame(disease = sample(diseases, 20, replace = TRUE),
patient = rep_len(1:5, 20), stringsAsFactors = FALSE)
# Chunk 5: splitit
claims_tx <- split(claims_data$patient, claims_data$disease)
# Chunk 6: add_association
claims_tx$Hypertension <- c(claims_tx$Hypertension, 1:3)
claims_tx$Kidney_disease <- c(claims_tx$Kidney_disease, 1:3)
claims_tx$Heart_disease <- c(claims_tx$Heart_disease, 1:3)
# Chunk 7: make_tidlists
claims_tx <- lapply(claims_tx, function(x) sort(unique(x)))
claims_tx <- as(claims_tx, "tidLists")
# Chunk 8: claims_out
claims_tx
# Chunk 9: claims_inspect
claims_inspect <- inspect(claims_tx)
# Chunk 10: display_claims_inspect
pander::pander(claims_inspect)
# Chunk 11: tid_methods
methods(class = "tidLists")
# Chunk 12: image_claims
image(claims_tx)
claims_rules <-
apriori(claims_tx, parameter = list(support = 0.01, confidence = 0.1, maxlen = 3))
plot(claims_rules, method = "graph", control = list(type = "items"))
claims_rules <-
apriori(claims_tx, parameter = list(support = 0.01, confidence = 0.1, maxlen = 2))
plot(claims_rules, method = "graph", control = list(type = "items"))
as(claims_rules, "data.frame")
library(igraph)
claims_igraph <- graph.data.frame(d = claims_rules_measures %>% select(First_disease, Second_disease, oddsRatio))
plot(claims_igraph, edge.arrow.size = 0.04)
class(claims_igraph)
methods(class = "igraph")
library(ggnetwork)
library(viridis)
methods(class = "rules")
claims_ggnetwork <- ggnetwork(claims_network)
claims_rules_measures <- interestMeasure(x = claims_rules,
measure = c("chiSquared", "FishersExactTest", "oddsRatio"),
transactions = claims_tx)
claims_rules_measures <-
cbind(as(claims_rules, "data.frame"), claims_rules_measures)
claims_rules_measures$rules <- as.character(claims_rules_measures$rules)
claims_rules_measures <-
claims_rules_measures %>%
separate(col = "rules",
into = c("First_disease", "Second_disease"),
sep = "\\=\\>",
extra = "drop")
claims_rules_measures$First_disease <-
str_replace_all(string = claims_rules_measures$First_disease, pattern = "\\{|\\}", replacement = "")
claims_rules_measures$Second_disease <-
str_replace_all(string = claims_rules_measures$Second_disease, pattern = "\\{|\\}", replacement = "")
claims_rules_measures <-
claims_rules_measures %>% filter(First_disease != " ")
claims_rules_measures <-
claims_rules_measures[rep_len(c(TRUE, FALSE), nrow(claims_rules_measures)),]
claims_network <-
network(x = cbind(claims_rules_measures$First_disease, claims_rules_measures$Second_disease), directed = TRUE)
plot(claims_network)
library(igraph)
claims_igraph <- graph.data.frame(d = claims_rules_measures %>% select(First_disease, Second_disease, oddsRatio))
plot(claims_igraph, edge.arrow.size = 0.04)
class(claims_igraph)
methods(class = "igraph")
library(ggnetwork)
library(viridis)
methods(class = "rules")
claims_ggnetwork <- ggnetwork(claims_network)
claims_ggnetwork$vertex.names <- as.character(claims_ggnetwork$vertex.names)
ggplot(claims_ggnetwork, aes()) +
geom_segment(aes(x = x, y = y, xend = xend, yend = yend)) +
geom_point(aes(x, y, col = vertex.names), size = 10) +
scale_color_viridis(discrete = TRUE) +
theme(legend.position = "right")
install.packages("arules", "arulesViz", "arulesSequences")
Version()
R.Version()
install.packages("arules")
install.packages("arulesViz")
install.packages("statnet")
install.packages("ggnetwork")
install.packages("viridis")
??quietly
install.packages("RefManageR")
install.packages("SEERaBomb")
??mkSEER
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, error = FALSE)
# Chunk 2: libraries
library(arules)
library(arulesViz)
library(dplyr)
library(ggplot2)
library(tidyr)
library(stringr)
# Chunk 3: set_seed
set.seed(9001)
# Chunk 4: sim_data
diseases <-
c("Heart_disease",
"Hypertension",
"Kidney_disease",
"Liver_cirrhosis",
"Gall_stones",
"Kidney_stones",
"Tonsiliths",
"Unspecified_cancer",
"Vitamin_D_deficiency",
"Trichtillomania",
"Hearing_loss")
claims_data <-
data.frame(disease = sample(diseases, 20, replace = TRUE),
patient = rep_len(1:5, 20), stringsAsFactors = FALSE)
# Chunk 5: splitit
claims_tx <- split(claims_data$patient, claims_data$disease)
# Chunk 6: add_association
claims_tx$Hypertension <- c(claims_tx$Hypertension, 1:3)
claims_tx$Kidney_disease <- c(claims_tx$Kidney_disease, 1:3)
claims_tx$Heart_disease <- c(claims_tx$Heart_disease, 1:3)
# Chunk 7: make_tidlists
claims_tx <- lapply(claims_tx, function(x) sort(unique(x)))
claims_tx <- as(claims_tx, "tidLists")
# Chunk 8: claims_out
claims_tx
# Chunk 9: claims_inspect
claims_inspect <- inspect(claims_tx)
# Chunk 10: display_claims_inspect
pander::pander(claims_inspect)
# Chunk 11: tid_methods
methods(class = "tidLists")
# Chunk 12: image_claims
image(claims_tx)
# Chunk 13: apriori
claims_rules <-
apriori(claims_tx, parameter = list(support = 0.01, confidence = 0.1, maxlen = 2))
# Chunk 14: plot_rules
plot(claims_rules, method = "graph", control = list(type = "items"))
# Chunk 15: interests
claims_rules_measures <- interestMeasure(x = claims_rules,
measure = c("chiSquared", "FishersExactTest", "oddsRatio"),
transactions = claims_tx)
claims_rules_measures <-
cbind(as(claims_rules, "data.frame"), claims_rules_measures)
claims_rules_measures
library(statnet)
claims_rules_measures$rules <- as.character(claims_rules_measures$rules)
claims_rules_measures <-
claims_rules_measures %>%
separate(col = "rules",
into = c("First_disease", "Second_disease"),
sep = "\\=\\>",
extra = "drop")
claims_rules_measures$First_disease <-
str_replace_all(string = claims_rules_measures$First_disease, pattern = "\\{|\\}", replacement = "")
claims_rules_measures$Second_disease <-
str_replace_all(string = claims_rules_measures$Second_disease, pattern = "\\{|\\}", replacement = "")
claims_rules_measures <-
claims_rules_measures %>% filter(First_disease != " ")
claims_rules_measures <-
claims_rules_measures[rep_len(c(TRUE, FALSE), nrow(claims_rules_measures)),]
claims_rules_measures %>% head
table(claims_rules_measures$fishersExactTest)
table(claims_rules_measures$First_disease)
claims_rules_measures
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, error = FALSE)
# Chunk 2: libraries
library(arules)
library(arulesViz)
library(dplyr)
library(ggplot2)
library(tidyr)
library(stringr)
# Chunk 3: set_seed
set.seed(9001)
# Chunk 4: sim_data
diseases <-
c("Heart_disease",
"Hypertension",
"Kidney_disease",
"Liver_cirrhosis",
"Gall_stones",
"Kidney_stones",
"Tonsiliths",
"Unspecified_cancer",
"Vitamin_D_deficiency",
"Trichtillomania",
"Hearing_loss")
claims_data <-
data.frame(disease = sample(diseases, 20, replace = TRUE),
patient = rep_len(1:5, 20), stringsAsFactors = FALSE)
# Chunk 5: splitit
claims_tx <- split(claims_data$patient, claims_data$disease)
# Chunk 6: add_association
claims_tx$Hypertension <- c(claims_tx$Hypertension, 1:3)
claims_tx$Kidney_disease <- c(claims_tx$Kidney_disease, 1:3)
claims_tx$Heart_disease <- c(claims_tx$Heart_disease, 1:3)
# Chunk 7: make_tidlists
claims_tx <- lapply(claims_tx, function(x) sort(unique(x)))
claims_tx <- as(claims_tx, "tidLists")
# Chunk 8: claims_out
claims_tx
# Chunk 9: claims_inspect
claims_inspect <- inspect(claims_tx)
# Chunk 10: display_claims_inspect
pander::pander(claims_inspect)
# Chunk 11: tid_methods
methods(class = "tidLists")
# Chunk 12: image_claims
image(claims_tx)
# Chunk 13: apriori
claims_rules <-
apriori(claims_tx, parameter = list(support = 0.01, confidence = 0.1, maxlen = 2))
# Chunk 14: plot_rules
plot(claims_rules, method = "graph", control = list(type = "items"))
# Chunk 15: interests
claims_rules_measures <- interestMeasure(x = claims_rules,
measure = c("chiSquared", "FishersExactTest", "oddsRatio"),
transactions = claims_tx)
claims_rules_measures <-
cbind(as(claims_rules, "data.frame"), claims_rules_measures)
# Chunk 16: munge_interests
library(statnet)
claims_rules_measures$rules <- as.character(claims_rules_measures$rules)
claims_rules_measures <-
claims_rules_measures %>%
separate(col = "rules",
into = c("First_disease", "Second_disease"),
sep = "\\=\\>",
extra = "drop")
claims_rules_measures$First_disease <-
str_replace_all(string = claims_rules_measures$First_disease, pattern = "\\{|\\}", replacement = "")
claims_rules_measures$Second_disease <-
str_replace_all(string = claims_rules_measures$Second_disease, pattern = "\\{|\\}", replacement = "")
claims_rules_measures <-
claims_rules_measures %>% filter(First_disease != " ")
claims_rules_measures <-
claims_rules_measures[rep_len(c(TRUE, FALSE), nrow(claims_rules_measures)),]
claims_network <-
network(x = cbind(claims_rules_measures$First_disease, claims_rules_measures$Second_disease), directed = TRUE)
# Chunk 17: claims_viz
plot(claims_network)
# Chunk 18: gg_claims
library(igraph)
claims_igraph <- graph.data.frame(d = claims_rules_measures %>% select(First_disease, Second_disease, oddsRatio))
plot(claims_igraph, edge.arrow.size = 0.04)
class(claims_igraph)
methods(class = "igraph")
claims_igraph <- graph.data.frame(d = claims_rules_measures %>% select(First_disease, Second_disease))
plot(claims_igraph, edge.arrow.size = 0.04)
library(ggnetwork)
library(viridis)
methods(class = "rules")
claims_ggnetwork <- ggnetwork(claims_network)
claims_ggnetwork$vertex.names <- as.character(claims_ggnetwork$vertex.names)
ggplot(claims_ggnetwork, aes()) +
geom_segment(aes(x = x, y = y, xend = xend, yend = yend)) +
geom_point(aes(x, y, col = vertex.names), size = 10) +
scale_color_viridis(discrete = TRUE) +
theme(legend.position = "right")
claims_ggnetwork
claims_network
claims_network$mel
claims_network$gal
claims_network$oel
str(claims_network)
methods(class = "network")
sociality(claims_network)
summary(claims_network)
print(claims_networkj)
print(claims_network)
methods(class = "network")
typeof(claims_network)
class(claims_network)
?network
vertex_attr_names(claims_network)
vertex(claims_network)
vertex.attributes(claims_network)
vertex_attr_names(claims_igraph)
network.vertex.names(claims_network)
claims_rules_measures$First_disease %>% table
claims_rules_measures$Second_disease %>% table
str_trim(claims_rules_measures$First_disease, sides = "both")
str_trim(claims_rules_measures$First_disease, side = "both")
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, error = FALSE)
# Chunk 2: libraries
library(arules)
library(arulesViz)
library(dplyr)
library(ggplot2)
library(tidyr)
library(stringr)
# Chunk 3: set_seed
set.seed(9001)
# Chunk 4: sim_data
diseases <-
c("Heart_disease",
"Hypertension",
"Kidney_disease",
"Liver_cirrhosis",
"Gall_stones",
"Kidney_stones",
"Tonsiliths",
"Unspecified_cancer",
"Vitamin_D_deficiency",
"Trichtillomania",
"Hearing_loss")
claims_data <-
data.frame(disease = sample(diseases, 20, replace = TRUE),
patient = rep_len(1:5, 20), stringsAsFactors = FALSE)
# Chunk 5: splitit
claims_tx <- split(claims_data$patient, claims_data$disease)
# Chunk 6: add_association
claims_tx$Hypertension <- c(claims_tx$Hypertension, 1:3)
claims_tx$Kidney_disease <- c(claims_tx$Kidney_disease, 1:3)
claims_tx$Heart_disease <- c(claims_tx$Heart_disease, 1:3)
# Chunk 7: make_tidlists
claims_tx <- lapply(claims_tx, function(x) sort(unique(x)))
claims_tx <- as(claims_tx, "tidLists")
# Chunk 8: claims_out
claims_tx
# Chunk 9: claims_inspect
claims_inspect <- inspect(claims_tx)
# Chunk 10: display_claims_inspect
pander::pander(claims_inspect)
# Chunk 11: tid_methods
methods(class = "tidLists")
# Chunk 12: image_claims
image(claims_tx)
# Chunk 13: apriori
claims_rules <-
apriori(claims_tx, parameter = list(support = 0.01, confidence = 0.1, maxlen = 2))
# Chunk 14: plot_rules
plot(claims_rules, method = "graph", control = list(type = "items"))
# Chunk 15: interests
claims_rules_measures <- interestMeasure(x = claims_rules,
measure = c("chiSquared", "FishersExactTest", "oddsRatio"),
transactions = claims_tx)
claims_rules_measures <-
cbind(as(claims_rules, "data.frame"), claims_rules_measures)
# Chunk 16: munge_interests
library(statnet)
claims_rules_measures$rules <- as.character(claims_rules_measures$rules)
claims_rules_measures <-
claims_rules_measures %>%
separate(col = "rules",
into = c("First_disease", "Second_disease"),
sep = "\\=\\>",
extra = "drop")
claims_rules_measures$First_disease <-
str_replace_all(string = claims_rules_measures$First_disease, pattern = "\\{|\\}", replacement = "") %>% str_trim(side = "both")
claims_rules_measures$Second_disease <-
str_replace_all(string = claims_rules_measures$Second_disease, pattern = "\\{|\\}", replacement = "") %>% str_trim(side = "both")
claims_rules_measures <-
claims_rules_measures %>% filter(First_disease != " ")
claims_rules_measures <-
claims_rules_measures[rep_len(c(TRUE, FALSE), nrow(claims_rules_measures)),]
claims_network <-
network(x = cbind(claims_rules_measures$First_disease, claims_rules_measures$Second_disease), directed = TRUE)
# Chunk 17: claims_viz
plot(claims_network)
# Chunk 18: gg_claims
library(igraph)
claims_igraph <- graph.data.frame(d = claims_rules_measures %>% select(First_disease, Second_disease, oddsRatio))
plot(claims_igraph, edge.arrow.size = 0.04)
class(claims_igraph)
methods(class = "igraph")
# Chunk 19: check_methods
library(ggnetwork)
library(viridis)
methods(class = "rules")
claims_ggnetwork <- ggnetwork(claims_network)
claims_ggnetwork$vertex.names <- as.character(claims_ggnetwork$vertex.names)
ggplot(claims_ggnetwork, aes()) +
geom_segment(aes(x = x, y = y, xend = xend, yend = yend)) +
geom_point(aes(x, y, col = vertex.names), size = 10) +
scale_color_viridis(discrete = TRUE) +
theme(legend.position = "right")
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, error = FALSE)
# Chunk 2: libraries
library(arules)
library(arulesViz)
library(dplyr)
library(ggplot2)
library(tidyr)
library(stringr)
# Chunk 3: set_seed
set.seed(9001)
# Chunk 4: sim_data
diseases <-
c("Heart_disease",
"Hypertension",
"Kidney_disease",
"Liver_cirrhosis",
"Gall_stones",
"Kidney_stones",
"Tonsiliths",
"Unspecified_cancer",
"Vitamin_D_deficiency",
"Trichtillomania",
"Hearing_loss")
claims_data <-
data.frame(disease = sample(diseases, 20, replace = TRUE),
patient = rep_len(1:5, 20), stringsAsFactors = FALSE)
# Chunk 5: splitit
claims_tx <- split(claims_data$patient, claims_data$disease)
# Chunk 6: add_association
claims_tx$Hypertension <- c(claims_tx$Hypertension, 1:3)
claims_tx$Kidney_disease <- c(claims_tx$Kidney_disease, 1:3)
claims_tx$Heart_disease <- c(claims_tx$Heart_disease, 1:3)
# Chunk 7: make_tidlists
claims_tx <- lapply(claims_tx, function(x) sort(unique(x)))
claims_tx <- as(claims_tx, "tidLists")
# Chunk 8: claims_out
claims_tx
# Chunk 9: claims_inspect
claims_inspect <- inspect(claims_tx)
# Chunk 10: display_claims_inspect
pander::pander(claims_inspect)
# Chunk 11: tid_methods
methods(class = "tidLists")
# Chunk 12: image_claims
image(claims_tx)
# Chunk 13: apriori
claims_rules <-
apriori(claims_tx, parameter = list(support = 0.01, confidence = 0.1, maxlen = 2))
# Chunk 14: plot_rules
plot(claims_rules, method = "graph", control = list(type = "items"))
# Chunk 15: interests
claims_rules_measures <- interestMeasure(x = claims_rules,
measure = c("chiSquared", "FishersExactTest", "oddsRatio"),
transactions = claims_tx)
claims_rules_measures <-
cbind(as(claims_rules, "data.frame"), claims_rules_measures)
# Chunk 16: munge_interests
library(statnet)
claims_rules_measures$rules <- as.character(claims_rules_measures$rules)
claims_rules_measures <-
claims_rules_measures %>%
separate(col = "rules",
into = c("First_disease", "Second_disease"),
sep = "\\=\\>",
extra = "drop")
claims_rules_measures$First_disease <-
str_replace_all(string = claims_rules_measures$First_disease, pattern = "\\{|\\}", replacement = "") %>% str_trim(side = "both")
claims_rules_measures$Second_disease <-
str_replace_all(string = claims_rules_measures$Second_disease, pattern = "\\{|\\}", replacement = "") %>% str_trim(side = "both")
claims_rules_measures <-
claims_rules_measures %>% filter(First_disease != " ")
claims_rules_measures <-
claims_rules_measures[rep_len(c(TRUE, FALSE), nrow(claims_rules_measures)),]
claims_network <-
network(x = cbind(claims_rules_measures$First_disease, claims_rules_measures$Second_disease), directed = TRUE)
# Chunk 17: claims_viz
plot(claims_network)
# Chunk 18: gg_claims
library(igraph)
claims_igraph <- graph.data.frame(d = claims_rules_measures %>% select(First_disease, Second_disease, oddsRatio))
plot(claims_igraph, edge.arrow.size = 0.04)
class(claims_igraph)
methods(class = "igraph")
# Chunk 19: check_methods
library(ggnetwork)
library(viridis)
methods(class = "rules")
claims_ggnetwork <- ggnetwork(claims_network)
claims_ggnetwork$vertex.names <- as.character(claims_ggnetwork$vertex.names)
ggplot(claims_ggnetwork, aes()) +
geom_segment(aes(x = x, y = y, xend = xend, yend = yend)) +
geom_point(aes(x, y, col = vertex.names), size = 10) +
scale_color_viridis(discrete = TRUE) +
theme(legend.position = "right")
table(is.na(claims_rules_measures$First_disease))
table(is.na(claims_rules_measures$Second_disease))
table(claims_rules_measures$Second_disease)
table(claims_rules_measures$First_disease)
claims_rules_measures$First_disease
View(claims_inspect)
source('~/mustafaascha.github.io/RMarkdown Posts/networks_simulation.R', echo=TRUE)
library(purrr)
update.packages()
